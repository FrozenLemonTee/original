# .github/workflows/deploy-docs-existing-tags.yml
name: Deploy Documentation - Existing Tags

# 直接在 test 分支 push 时触发
on:
  push:
    branches:
      - test

jobs:
  deploy-existing-tags:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tags to deploy
        id: set-tags
        run: |
          # 一次性部署的指定 tags
          TAGS="v0.1.0 v0.1.2 v0.1.4"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Process each tag
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TAGS: ${{ steps.set-tags.outputs.tags }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq doxygen graphviz plantuml
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 克隆文档仓库
          git clone -b master https://$GH_PAT@github.com/FrozenLemonTee/original_docs.git deploy-repo
          
          for TAG in $TAGS; do
            echo "Processing tag: $TAG"
          
            # 检出特定标签
            git checkout $TAG
          
            # 提取版本号
            VERSION=${TAG#v}
            mkdir -p ../original_docs
            doxygen Doxyfile
          
            if [ ! -d "../original_docs/docs/html" ]; then
              echo "Warning: Documentation was not generated for tag $TAG"
              continue
            fi
          
            # 创建版本信息文件
            echo '<!DOCTYPE html>' > ../original_docs/docs/html/version.html
            echo '<html>' >> ../original_docs/docs/html/version.html
            echo '<head><title>Version Info</title></head>' >> ../original_docs/docs/html/version.html
            echo '<body>' >> ../original_docs/docs/html/version.html
            echo "    <p>Version: $VERSION</p>" >> ../original_docs/docs/html/version.html
            echo '</body>' >> ../original_docs/docs/html/version.html
          
            # 部署到文档仓库
            cd deploy-repo
            mkdir -p versions
            VERSION_DIR="versions/$VERSION"
            rm -rf "$VERSION_DIR"
            mkdir -p "$VERSION_DIR"
            cp -r ../original_docs/docs/html/* "$VERSION_DIR"/
            cd ..
          done
          
          # 提交更改
          cd deploy-repo
          git add .
          if git diff-index --quiet HEAD --; then
            echo "No changes to deploy"
          else
            git commit -m "Deploy documentation for v0.1.0, v0.1.2, v0.1.4"
            git push origin master
          fi
