# .github/workflows/deploy-docs-latest.yml

name: deploy-docs-latest.yml
on:
  push:
    branches: [ test ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz plantuml

      - name: Build documentation
        run: |
          # Create the necessary directory structure
            mkdir -p ../original_docs
          
          # Run doxygen
            doxygen Doxyfile
          
          # Check whether the document was generated successfully
            if [ ! -d "../original_docs/docs/html" ]; then
              echo "Error: Documentation was not generated in expected location"
              ls -la ../original_docs/docs/ || echo "Docs directory not found"
              exit 1
            fi
          
          # Create version information file
            cat > ../original_docs/docs/html/version.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>Version Info</title>
            </head>
            <body>
                <h1>Documentation Version</h1>
                <p>Version: latest</p>
                <p>Branch: test</p>
                <p>Build Date: $(date -u)</p>
                <p>Commit: ${{ github.sha }}</p>
            </body>
            </html>
            EOF

      - name: Deploy to original-docs repository
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          # Configure git
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Clone document repository
            git clone https://${{ secrets.GH_PAT }}@github.com/FrozenLemonTee/original_docs.git deploy-repo
            
            cd deploy-repo
          
          # Clean up old files (keep the .git directory)
            find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name 'CNAME' -exec rm -rf {} + 2>/dev/null || true
          
          # Copy the newly generated document to the latest directory
            mkdir -p latest
            cp -r ../../original_docs/docs/html/* latest/
          
          # Create index.html to redirect to the latest version
            cat > index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <meta http-equiv="refresh" content="0; url=latest/index.html">
            </head>
            <body>
                <p>Redirecting to <a href="latest/index.html">latest documentation</a>...</p>
                <p>Available versions:</p>
                <ul>
                    <li><a href="stable/index.html">Stable (master branch)</a></li>
                    <li><a href="latest/index.html">Latest (test branch)</a></li>
                    <li><a href="versions/">Tag versions</a></li>
                </ul>
            </body>
            </html>
            EOF
          
          # Submit and push
            git add .
            if git diff-index --quiet HEAD --; then
              echo "No changes to deploy"
            else
              git commit -m "Deploy latest documentation from test branch - ${{ github.sha }}"
              git push origin main
              echo "Latest documentation deployed successfully"
            fi
